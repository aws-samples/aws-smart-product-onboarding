# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

import pytest
from lxml import etree  # nosec - B410: lxml is needed to parse partial XML. The XML is generated by an LLM
from amzn_smart_product_onboarding_core_utils.xml_output import xml_to_dict, parse_response


def test_xml_to_dict_simple():
    xml = etree.fromstring("<item>value</item>")  # nosec - B320: XML comes from string literal
    result = xml_to_dict(xml)
    assert result == {"item": "value"}


def test_xml_to_dict_nested():
    xml = etree.fromstring(  # nosec - B320: XML comes from string literal
        "<parent><child1>value1</child1><child2>value2</child2></parent>"
    )
    result = xml_to_dict(xml)
    assert result == {"parent": {"child1": "value1", "child2": "value2"}}


def test_xml_to_dict_list():
    xml = etree.fromstring(  # nosec - B320: XML comes from string literal
        "<parent><child>value1</child><child>value2</child></parent>"
    )
    result = xml_to_dict(xml)
    assert result == {"parent": {"child": ["value1", "value2"]}}


def test_xml_to_dict_empty():
    xml = etree.fromstring("<item></item>")  # nosec - B320: XML comes from string literal
    result = xml_to_dict(xml)
    assert result == {"item": ""}


def test_parse_response_simple():
    xml_string = "<response><item>value</item></response>"
    result = parse_response(xml_string, cdata_tags=[])
    assert result == {"response": {"item": "value"}}


def test_parse_response_with_cdata():
    xml_string = "<response><thinking>thought process</thinking><reason>because</reason></response>"
    result = parse_response(xml_string, cdata_tags=["thinking", "reason"])
    assert result == {"response": {"thinking": "thought process", "reason": "because"}}


def test_parse_response_with_custom_cdata():
    xml_string = "<response><custom>special content</custom></response>"
    result = parse_response(xml_string, cdata_tags=["custom"])
    assert result == {"response": {"custom": "special content"}}


def test_parse_response_invalid_xml():
    xml_string = "<response><unclosed>"
    with pytest.raises(ValueError, match="Invalid XML:"):
        parse_response(xml_string, cdata_tags=[])


def test_parse_response_with_root_wrapping():
    xml_string = "<item>value</item>"
    result = parse_response(xml_string, cdata_tags=[])
    assert result == {"item": "value"}


def test_parse_response_with_xml_in_cdata():
    xml_string = "<response><thinking><inner>tag</inner></thinking></response>"
    result = parse_response(xml_string, cdata_tags=["thinking"])
    assert result == {"response": {"thinking": "<inner>tag</inner>"}}


def test_parse_response_with_multiline_cdata():
    xml_string = """
    <response>
        <thinking>
            Line 1
            Line 2
        </thinking>
    </response>
    """
    result = parse_response(xml_string, cdata_tags=["thinking"])
    assert result == {"response": {"thinking": "\n            Line 1\n            Line 2\n        "}}


def test_parse_response_with_single_nested_item():
    xml_string = """
    <response>
      <attributes>
        <attribute>
          <name>Fixed Installation/Portable</name>
          <value>PORTABLE</value>
        </attribute>
      </attributes>
    </response>
    """
    result = parse_response(xml_string)
    assert result == {
        "response": {"attributes": {"attribute": {"name": "Fixed Installation/Portable", "value": "PORTABLE"}}}
    }


def test_parse_response_with_multiple_nested_item():
    xml_string = """
    <response>
      <attributes>
        <attribute>
          <name>Fixed Installation/Portable</name>
          <value>PORTABLE</value>
        </attribute>
        <attribute>
          <name>Another Attribute</name>
          <value>OTHER_VALUE</value>
        </attribute>
      </attributes>
    </response>
    """
    result = parse_response(xml_string)
    assert result == {
        "response": {
            "attributes": {
                "attribute": [
                    {"name": "Fixed Installation/Portable", "value": "PORTABLE"},
                    {"name": "Another Attribute", "value": "OTHER_VALUE"},
                ]
            }
        }
    }
